/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Component, ContentChildren, EventEmitter, HostListener, Input, Output, QueryList, ElementRef, } from '@angular/core';
import { KeyCodes } from '@clr/core/common';
import { ClrFocusDirection } from './enums/focus-direction.enum';
import { ClrKeyFocusItem } from './key-focus-item';
import { getKeyCodes, preventArrowKeyScroll } from './util';
var ClrKeyFocus = /** @class */ (function () {
    function ClrKeyFocus(elementRef) {
        this.elementRef = elementRef;
        this.direction = ClrFocusDirection.VERTICAL;
        this.focusOnLoad = false;
        this.focusChange = new EventEmitter();
        this._current = 0;
        this.subscriptions = [];
    }
    Object.defineProperty(ClrKeyFocus.prototype, "focusableItems", {
        get: function () {
            if (this._focusableItems) {
                return this._focusableItems;
            }
            else {
                return this.clrKeyFocusItems.toArray();
            }
        },
        set: function (elements) {
            // We accept a list of focusable elements (HTMLElements or existing Directives) or auto query for clrKeyFocusItem
            // We accept a list reference in the cases where we cannot use ContentChildren to query
            // ContentChildren can be unavailable if content is projected outside the scope of the component (see tabs).
            if (elements && elements.length) {
                this._focusableItems = elements;
                this.initializeFocus();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrKeyFocus.prototype, "nativeElement", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrKeyFocus.prototype, "current", {
        get: function () {
            return this._current;
        },
        set: function (value) {
            if (this._current !== value) {
                this._current = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrKeyFocus.prototype, "currentItem", {
        get: function () {
            return this.focusableItems[this._current];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrKeyFocus.prototype, "currentItemElement", {
        get: function () {
            return this.currentItem.nativeElement ? this.currentItem.nativeElement : this.currentItem;
        },
        enumerable: true,
        configurable: true
    });
    ClrKeyFocus.prototype.focusCurrent = function () {
        this.currentItem.focus();
        this.focusChange.next(this._current);
    };
    ClrKeyFocus.prototype.moveTo = function (position) {
        if (this.positionInRange(position)) {
            this.current = position;
            this.focusCurrent();
        }
    };
    ClrKeyFocus.prototype.ngAfterContentInit = function () {
        this.subscriptions.push(this.listenForItemUpdates());
        this.initializeFocus();
    };
    ClrKeyFocus.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    ClrKeyFocus.prototype.handleKeyboardEvent = function (event) {
        // Make sure event was originated on the current item's element
        if (this.currentItemElement !== event.target) {
            var position = this.getItemPosition(event.target);
            if (this.positionInRange(position)) {
                this.current = position;
            }
        }
        if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {
            this.moveTo(this.current - 1);
        }
        else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {
            this.moveTo(this.current + 1);
        }
        else if (event.code === KeyCodes.Home) {
            this.moveTo(0);
        }
        else if (event.code === KeyCodes.End) {
            this.moveTo(this.focusableItems.length - 1);
        }
        preventArrowKeyScroll(event);
    };
    ClrKeyFocus.prototype.setClickedItemCurrent = function (event) {
        var position = this.getItemPosition(event.target);
        if (position > -1) {
            this.moveTo(position);
        }
    };
    ClrKeyFocus.prototype.getItemPosition = function (item) {
        if (this._focusableItems) {
            return this.focusableItems.indexOf(item);
        }
        else {
            return this.focusableItems.map(function (_item) { return _item.nativeElement; }).indexOf(item);
        }
    };
    ClrKeyFocus.prototype.positionInRange = function (position) {
        return position >= 0 && position < this.focusableItems.length;
    };
    ClrKeyFocus.prototype.currentFocusIsNotFirstItem = function () {
        return this._current - 1 >= 0;
    };
    ClrKeyFocus.prototype.currentFocusIsNotLastItem = function () {
        return this._current + 1 < this.focusableItems.length;
    };
    ClrKeyFocus.prototype.initializeFocus = function () {
        if (this.focusableItems && this.focusableItems.length) {
            // It is possible that the focus was on an element, whose index is no longer available.
            // This can happen when some of the focusable elements are being removed.
            // In such cases, the new focus is initialized on the last focusable element.
            if (this._current >= this.focusableItems.length) {
                this._current = this.focusableItems.length - 1;
            }
            if (this.focusOnLoad) {
                this.currentItem.focus();
                this.focusChange.next();
            }
        }
    };
    ClrKeyFocus.prototype.listenForItemUpdates = function () {
        var _this = this;
        return this.clrKeyFocusItems.changes.subscribe(function () {
            _this.initializeFocus();
        });
    };
    ClrKeyFocus.prototype.nextKeyPressed = function (event) {
        var keyCodes = getKeyCodes(event);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return event.key === keyCodes.ArrowDown;
            case ClrFocusDirection.HORIZONTAL:
                return event.key === keyCodes.ArrowRight;
            case ClrFocusDirection.BOTH:
                return event.key === keyCodes.ArrowDown || event.key === keyCodes.ArrowRight;
            default:
                return false;
        }
    };
    ClrKeyFocus.prototype.prevKeyPressed = function (event) {
        var keyCodes = getKeyCodes(event);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return event.key === keyCodes.ArrowUp;
            case ClrFocusDirection.HORIZONTAL:
                return event.key === keyCodes.ArrowLeft;
            case ClrFocusDirection.BOTH:
                return event.key === keyCodes.ArrowUp || event.key === keyCodes.ArrowLeft;
            default:
                return false;
        }
    };
    ClrKeyFocus.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input('clrDirection')
    ], ClrKeyFocus.prototype, "direction", void 0);
    __decorate([
        Input('clrFocusOnLoad')
    ], ClrKeyFocus.prototype, "focusOnLoad", void 0);
    __decorate([
        Output('clrFocusChange')
    ], ClrKeyFocus.prototype, "focusChange", void 0);
    __decorate([
        ContentChildren(ClrKeyFocusItem, { descendants: true })
    ], ClrKeyFocus.prototype, "clrKeyFocusItems", void 0);
    __decorate([
        Input('clrKeyFocus')
    ], ClrKeyFocus.prototype, "focusableItems", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], ClrKeyFocus.prototype, "handleKeyboardEvent", null);
    __decorate([
        HostListener('click', ['$event'])
    ], ClrKeyFocus.prototype, "setClickedItemCurrent", null);
    ClrKeyFocus = __decorate([
        Component({
            selector: '[clrKeyFocus]',
            template: '<ng-content></ng-content>'
        })
    ], ClrKeyFocus);
    return ClrKeyFocus;
}());
export { ClrKeyFocus };
//# sourceMappingURL=data:application/json;base64,