import { __assign, __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { commonStringsDefault } from '@clr/core/common';
import * as i0 from "@angular/core";
var ClrCommonStringsService = /** @class */ (function () {
    function ClrCommonStringsService() {
        this._strings = commonStringsDefault;
    }
    /**
     * Allows you to pass in new overrides for localization
     */
    ClrCommonStringsService.prototype.localize = function (overrides) {
        this._strings = __assign(__assign({}, this._strings), overrides);
    };
    Object.defineProperty(ClrCommonStringsService.prototype, "keys", {
        /**
         * Access to all of the keys as strings
         */
        get: function () {
            return this._strings;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Parse a string with a set of tokens to replace
     */
    ClrCommonStringsService.prototype.parse = function (source, tokens) {
        if (tokens === void 0) { tokens = {}; }
        var names = Object.keys(tokens);
        var output = source;
        if (names.length) {
            names.forEach(function (name) {
                output = output.replace("{" + name + "}", tokens[name]);
            });
        }
        return output;
    };
    ClrCommonStringsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClrCommonStringsService_Factory() { return new ClrCommonStringsService(); }, token: ClrCommonStringsService, providedIn: "root" });
    ClrCommonStringsService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], ClrCommonStringsService);
    return ClrCommonStringsService;
}());
export { ClrCommonStringsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cmluZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInV0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFvQixNQUFNLGtCQUFrQixDQUFDOztBQUsxRTtJQUFBO1FBQ1UsYUFBUSxHQUFHLG9CQUFvQixDQUFDO0tBNkJ6QztJQTNCQzs7T0FFRztJQUNILDBDQUFRLEdBQVIsVUFBUyxTQUFvQztRQUMzQyxJQUFJLENBQUMsUUFBUSx5QkFBUSxJQUFJLENBQUMsUUFBUSxHQUFLLFNBQVMsQ0FBRSxDQUFDO0lBQ3JELENBQUM7SUFLRCxzQkFBSSx5Q0FBSTtRQUhSOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQzs7O09BQUE7SUFFRDs7T0FFRztJQUNILHVDQUFLLEdBQUwsVUFBTSxNQUFjLEVBQUUsTUFBc0M7UUFBdEMsdUJBQUEsRUFBQSxXQUFzQztRQUMxRCxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNwQixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDaEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7Z0JBQ2hCLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQUksSUFBSSxNQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0lBN0JVLHVCQUF1QjtRQUhuQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csdUJBQXVCLENBOEJuQztrQ0ExQ0Q7Q0EwQ0MsQUE5QkQsSUE4QkM7U0E5QlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb21tb25TdHJpbmdzRGVmYXVsdCwgQ2xyQ29tbW9uU3RyaW5ncyB9IGZyb20gJ0BjbHIvY29yZS9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2Uge1xuICBwcml2YXRlIF9zdHJpbmdzID0gY29tbW9uU3RyaW5nc0RlZmF1bHQ7XG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcGFzcyBpbiBuZXcgb3ZlcnJpZGVzIGZvciBsb2NhbGl6YXRpb25cbiAgICovXG4gIGxvY2FsaXplKG92ZXJyaWRlczogUGFydGlhbDxDbHJDb21tb25TdHJpbmdzPikge1xuICAgIHRoaXMuX3N0cmluZ3MgPSB7IC4uLnRoaXMuX3N0cmluZ3MsIC4uLm92ZXJyaWRlcyB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0byBhbGwgb2YgdGhlIGtleXMgYXMgc3RyaW5nc1xuICAgKi9cbiAgZ2V0IGtleXMoKTogUmVhZG9ubHk8Q2xyQ29tbW9uU3RyaW5ncz4ge1xuICAgIHJldHVybiB0aGlzLl9zdHJpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIGEgc3RyaW5nIHdpdGggYSBzZXQgb2YgdG9rZW5zIHRvIHJlcGxhY2VcbiAgICovXG4gIHBhcnNlKHNvdXJjZTogc3RyaW5nLCB0b2tlbnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fSkge1xuICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXModG9rZW5zKTtcbiAgICBsZXQgb3V0cHV0ID0gc291cmNlO1xuICAgIGlmIChuYW1lcy5sZW5ndGgpIHtcbiAgICAgIG5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKGB7JHtuYW1lfX1gLCB0b2tlbnNbbmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbn1cbiJdfQ==