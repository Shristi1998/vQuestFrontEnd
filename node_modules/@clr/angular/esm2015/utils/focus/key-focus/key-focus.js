/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { Component, ContentChildren, EventEmitter, HostListener, Input, Output, QueryList, ElementRef, } from '@angular/core';
import { KeyCodes } from '@clr/core/common';
import { ClrFocusDirection } from './enums/focus-direction.enum';
import { ClrKeyFocusItem } from './key-focus-item';
import { getKeyCodes, preventArrowKeyScroll } from './util';
let ClrKeyFocus = class ClrKeyFocus {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.direction = ClrFocusDirection.VERTICAL;
        this.focusOnLoad = false;
        this.focusChange = new EventEmitter();
        this._current = 0;
        this.subscriptions = [];
    }
    set focusableItems(elements) {
        // We accept a list of focusable elements (HTMLElements or existing Directives) or auto query for clrKeyFocusItem
        // We accept a list reference in the cases where we cannot use ContentChildren to query
        // ContentChildren can be unavailable if content is projected outside the scope of the component (see tabs).
        if (elements && elements.length) {
            this._focusableItems = elements;
            this.initializeFocus();
        }
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    get focusableItems() {
        if (this._focusableItems) {
            return this._focusableItems;
        }
        else {
            return this.clrKeyFocusItems.toArray();
        }
    }
    get current() {
        return this._current;
    }
    set current(value) {
        if (this._current !== value) {
            this._current = value;
        }
    }
    get currentItem() {
        return this.focusableItems[this._current];
    }
    get currentItemElement() {
        return this.currentItem.nativeElement ? this.currentItem.nativeElement : this.currentItem;
    }
    focusCurrent() {
        this.currentItem.focus();
        this.focusChange.next(this._current);
    }
    moveTo(position) {
        if (this.positionInRange(position)) {
            this.current = position;
            this.focusCurrent();
        }
    }
    ngAfterContentInit() {
        this.subscriptions.push(this.listenForItemUpdates());
        this.initializeFocus();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
    handleKeyboardEvent(event) {
        // Make sure event was originated on the current item's element
        if (this.currentItemElement !== event.target) {
            const position = this.getItemPosition(event.target);
            if (this.positionInRange(position)) {
                this.current = position;
            }
        }
        if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {
            this.moveTo(this.current - 1);
        }
        else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {
            this.moveTo(this.current + 1);
        }
        else if (event.code === KeyCodes.Home) {
            this.moveTo(0);
        }
        else if (event.code === KeyCodes.End) {
            this.moveTo(this.focusableItems.length - 1);
        }
        preventArrowKeyScroll(event);
    }
    setClickedItemCurrent(event) {
        const position = this.getItemPosition(event.target);
        if (position > -1) {
            this.moveTo(position);
        }
    }
    getItemPosition(item) {
        if (this._focusableItems) {
            return this.focusableItems.indexOf(item);
        }
        else {
            return this.focusableItems.map(_item => _item.nativeElement).indexOf(item);
        }
    }
    positionInRange(position) {
        return position >= 0 && position < this.focusableItems.length;
    }
    currentFocusIsNotFirstItem() {
        return this._current - 1 >= 0;
    }
    currentFocusIsNotLastItem() {
        return this._current + 1 < this.focusableItems.length;
    }
    initializeFocus() {
        if (this.focusableItems && this.focusableItems.length) {
            // It is possible that the focus was on an element, whose index is no longer available.
            // This can happen when some of the focusable elements are being removed.
            // In such cases, the new focus is initialized on the last focusable element.
            if (this._current >= this.focusableItems.length) {
                this._current = this.focusableItems.length - 1;
            }
            if (this.focusOnLoad) {
                this.currentItem.focus();
                this.focusChange.next();
            }
        }
    }
    listenForItemUpdates() {
        return this.clrKeyFocusItems.changes.subscribe(() => {
            this.initializeFocus();
        });
    }
    nextKeyPressed(event) {
        const keyCodes = getKeyCodes(event);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return event.key === keyCodes.ArrowDown;
            case ClrFocusDirection.HORIZONTAL:
                return event.key === keyCodes.ArrowRight;
            case ClrFocusDirection.BOTH:
                return event.key === keyCodes.ArrowDown || event.key === keyCodes.ArrowRight;
            default:
                return false;
        }
    }
    prevKeyPressed(event) {
        const keyCodes = getKeyCodes(event);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return event.key === keyCodes.ArrowUp;
            case ClrFocusDirection.HORIZONTAL:
                return event.key === keyCodes.ArrowLeft;
            case ClrFocusDirection.BOTH:
                return event.key === keyCodes.ArrowUp || event.key === keyCodes.ArrowLeft;
            default:
                return false;
        }
    }
};
ClrKeyFocus.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input('clrDirection')
], ClrKeyFocus.prototype, "direction", void 0);
__decorate([
    Input('clrFocusOnLoad')
], ClrKeyFocus.prototype, "focusOnLoad", void 0);
__decorate([
    Output('clrFocusChange')
], ClrKeyFocus.prototype, "focusChange", void 0);
__decorate([
    ContentChildren(ClrKeyFocusItem, { descendants: true })
], ClrKeyFocus.prototype, "clrKeyFocusItems", void 0);
__decorate([
    Input('clrKeyFocus')
], ClrKeyFocus.prototype, "focusableItems", null);
__decorate([
    HostListener('keydown', ['$event'])
], ClrKeyFocus.prototype, "handleKeyboardEvent", null);
__decorate([
    HostListener('click', ['$event'])
], ClrKeyFocus.prototype, "setClickedItemCurrent", null);
ClrKeyFocus = __decorate([
    Component({
        selector: '[clrKeyFocus]',
        template: '<ng-content></ng-content>'
    })
], ClrKeyFocus);
export { ClrKeyFocus };
//# sourceMappingURL=data:application/json;base64,